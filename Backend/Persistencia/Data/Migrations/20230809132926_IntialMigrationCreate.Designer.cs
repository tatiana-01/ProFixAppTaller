// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ProFixContext))]
    [Migration("20230809132926_IntialMigrationCreate")]
    partial class IntialMigrationCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.ARL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ARLs");
                });

            modelBuilder.Entity("Dominio.AreaContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AreaContactos");
                });

            modelBuilder.Entity("Dominio.CalidadProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CalidadProductos", (string)null);
                });

            modelBuilder.Entity("Dominio.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.ToTable("Ciudades", (string)null);
                });

            modelBuilder.Entity("Dominio.CompraProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("dateTime");

                    b.Property<string>("IdProveedor")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Total")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.HasKey("Id");

                    b.HasIndex("IdProveedor");

                    b.ToTable("CompraProveedores", (string)null);
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactoPersona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdAreaContacto")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoContacto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAreaContacto");

                    b.HasIndex("IdTipoContacto");

                    b.ToTable("Contactos", (string)null);
                });

            modelBuilder.Entity("Dominio.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("Dominio.EPS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EPSs");
                });

            modelBuilder.Entity("Dominio.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<int>("IdARL")
                        .HasColumnType("int");

                    b.Property<int>("IdEPS")
                        .HasColumnType("int");

                    b.Property<int>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<decimal>("Salario")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("IdARL");

                    b.HasIndex("IdEPS");

                    b.HasIndex("IdPersona")
                        .IsUnique();

                    b.HasIndex("SucursalId");

                    b.ToTable("Empleados", (string)null);
                });

            modelBuilder.Entity("Dominio.Especialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCargo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCargo");

                    b.ToTable("Especialidades", (string)null);
                });

            modelBuilder.Entity("Dominio.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdTipoEstado")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoEstado");

                    b.ToTable("Estados", (string)null);
                });

            modelBuilder.Entity("Dominio.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("dateTime");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdMetodoDePago")
                        .HasColumnType("int");

                    b.Property<int>("IdOrden")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotalManoObra")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<decimal>("ValorTotalReparacion")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<decimal>("ValorTotalRepuestos")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdMetodoDePago");

                    b.HasIndex("IdOrden")
                        .IsUnique();

                    b.ToTable("Facturas", (string)null);
                });

            modelBuilder.Entity("Dominio.Inspeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DiagnosticoCliente")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("DiagnosticoTaller")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("EstadoRadio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MarcaRadio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mueble")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Otros")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PuertaFrontalDerecha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PuertaFrontalIzquierda")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PuertaTraseraDerecha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PuertaTraseraIzquierda")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Tapetes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Techo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Inspecciones", (string)null);
                });

            modelBuilder.Entity("Dominio.MarcaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MarcaProductos");
                });

            modelBuilder.Entity("Dominio.MarcaVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MarcaVehiculos");
                });

            modelBuilder.Entity("Dominio.MetodoDePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MetodoDePagos");
                });

            modelBuilder.Entity("Dominio.MomentoReparacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MomentoReparaciones");
                });

            modelBuilder.Entity("Dominio.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Detalles")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdVisita")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdVisita")
                        .IsUnique();

                    b.ToTable("Ordenes", (string)null);
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Personas", (string)null);
                });

            modelBuilder.Entity("Dominio.PersonaContacto", b =>
                {
                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdContacto")
                        .HasColumnType("int");

                    b.HasKey("IdPersona", "IdContacto");

                    b.HasIndex("IdContacto");

                    b.ToTable("PersonaContactos", (string)null);
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCalidadProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdMarcaProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoProducto")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCalidadProducto");

                    b.HasIndex("IdMarcaProducto");

                    b.HasIndex("IdTipoProducto");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("Dominio.ProductoCompra", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdCompraProveedor")
                        .HasColumnType("int");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.HasKey("IdProducto", "IdCompraProveedor");

                    b.HasIndex("IdCompraProveedor");

                    b.ToTable("ProductoCompras", (string)null);
                });

            modelBuilder.Entity("Dominio.ProductoStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Ganancia")
                        .HasPrecision(25, 5)
                        .HasColumnType("decimal(25,5)");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PrecioVenta")
                        .HasPrecision(65, 5)
                        .HasColumnType("decimal(65,5)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdSucursal");

                    b.ToTable("ProductoStocks", (string)null);
                });

            modelBuilder.Entity("Dominio.ProductoStockReparacion", b =>
                {
                    b.Property<int>("IdProductoStock")
                        .HasColumnType("int");

                    b.Property<int>("IdReparacion")
                        .HasColumnType("int");

                    b.HasKey("IdProductoStock", "IdReparacion");

                    b.HasIndex("IdReparacion");

                    b.ToTable("ProductoStockReparaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.Reparacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Cantidad")
                        .HasPrecision(15, 5)
                        .HasColumnType("decimal(15,5)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdMomento")
                        .HasColumnType("int");

                    b.Property<int>("IdOrden")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoStockId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tiempo")
                        .HasPrecision(15, 5)
                        .HasColumnType("decimal(15,5)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(25, 5)
                        .HasColumnType("decimal(25,5)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdMomento");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdTipo");

                    b.HasIndex("ProductoStockId");

                    b.ToTable("Reparaciones", (string)null);
                });

            modelBuilder.Entity("Dominio.ReparacionEmpleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("IdReparacion")
                        .HasColumnType("int");

                    b.HasKey("IdEmpleado", "IdReparacion");

                    b.HasIndex("IdReparacion");

                    b.ToTable("ReparacionEmpleados", (string)null);
                });

            modelBuilder.Entity("Dominio.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Permisos")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Dominio.RolPersona", b =>
                {
                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.HasKey("IdPersona", "IdRol");

                    b.HasIndex("IdRol");

                    b.ToTable("RolPersonas", (string)null);
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Sucursales", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoContactos");
                });

            modelBuilder.Entity("Dominio.TipoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoEstados");
                });

            modelBuilder.Entity("Dominio.TipoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoProductos");
                });

            modelBuilder.Entity("Dominio.TipoReparacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoReparacion");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsuarioPersona")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdPersona");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("IdMarcaVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("IdPersona")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Kilometraje")
                        .HasPrecision(50, 5)
                        .HasColumnType("decimal(50,5)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdMarcaVehiculo");

                    b.HasIndex("IdPersona");

                    b.ToTable("Vehiculos", (string)null);
                });

            modelBuilder.Entity("Dominio.Visita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("dateTime");

                    b.Property<int>("IdEmpleadoResponsable")
                        .HasColumnType("int");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("Recomendaciones")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpleadoResponsable");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdSucursal");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("Visitas", (string)null);
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.HasOne("Dominio.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.CompraProveedor", b =>
                {
                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("ComprasProveedores")
                        .HasForeignKey("IdProveedor");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.HasOne("Dominio.AreaContacto", "AreaContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("IdAreaContacto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TipoContacto", "TipoContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("IdTipoContacto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaContacto");

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("Dominio.Empleado", b =>
                {
                    b.HasOne("Dominio.Especialidad", "Especialidad")
                        .WithMany("Empleados")
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("Dominio.ARL", "Arl")
                        .WithMany("Empleados")
                        .HasForeignKey("IdARL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.EPS", "Eps")
                        .WithMany("Empleados")
                        .HasForeignKey("IdEPS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithOne()
                        .HasForeignKey("Dominio.Empleado", "IdPersona");

                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Empleados")
                        .HasForeignKey("SucursalId");

                    b.Navigation("Arl");

                    b.Navigation("Eps");

                    b.Navigation("Especialidad");

                    b.Navigation("Persona");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.Especialidad", b =>
                {
                    b.HasOne("Dominio.Cargo", "Cargo")
                        .WithMany("Especialidades")
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("Dominio.Estado", b =>
                {
                    b.HasOne("Dominio.TipoEstado", "TipoEstado")
                        .WithMany("Estados")
                        .HasForeignKey("IdTipoEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEstado");
                });

            modelBuilder.Entity("Dominio.Factura", b =>
                {
                    b.HasOne("Dominio.Estado", "Estado")
                        .WithMany("Facturas")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.MetodoDePago", "MetodoDePago")
                        .WithMany("Facturas")
                        .HasForeignKey("IdMetodoDePago")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Orden", "Orden")
                        .WithOne()
                        .HasForeignKey("Dominio.Factura", "IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("MetodoDePago");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("Dominio.Orden", b =>
                {
                    b.HasOne("Dominio.Estado", "Estado")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Visita", "Visita")
                        .WithOne()
                        .HasForeignKey("Dominio.Orden", "IdVisita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("Dominio.PersonaContacto", b =>
                {
                    b.HasOne("Dominio.Contacto", "Contacto")
                        .WithMany("PersonasContactos")
                        .HasForeignKey("IdContacto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("PersonasContactos")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.HasOne("Dominio.CalidadProducto", "CalidadProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdCalidadProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.MarcaProducto", "MarcaProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdMarcaProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TipoProducto", "TipoProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdTipoProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalidadProducto");

                    b.Navigation("MarcaProducto");

                    b.Navigation("TipoProducto");
                });

            modelBuilder.Entity("Dominio.ProductoCompra", b =>
                {
                    b.HasOne("Dominio.CompraProveedor", "CompraProveedor")
                        .WithMany("ProductosCompras")
                        .HasForeignKey("IdCompraProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Producto", "Producto")
                        .WithMany("ProductosCompras")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompraProveedor");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.ProductoStock", b =>
                {
                    b.HasOne("Dominio.Producto", "Producto")
                        .WithMany("ProductosStocks")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("ProductosStocks")
                        .HasForeignKey("IdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Dominio.ProductoStockReparacion", b =>
                {
                    b.HasOne("Dominio.ProductoStock", "ProductoStock")
                        .WithMany("ProductosStockReparaciones")
                        .HasForeignKey("IdProductoStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Reparacion", "Reparacion")
                        .WithMany("ProductosStockReparaciones")
                        .HasForeignKey("IdReparacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductoStock");

                    b.Navigation("Reparacion");
                });

            modelBuilder.Entity("Dominio.Reparacion", b =>
                {
                    b.HasOne("Dominio.Estado", "Estado")
                        .WithMany("Reparaciones")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.MomentoReparacion", "MomentoReparacion")
                        .WithMany("Reparaciones")
                        .HasForeignKey("IdMomento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Orden", "Orden")
                        .WithMany("Reparaciones")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TipoReparacion", "TipoReparacion")
                        .WithMany("Reparaciones")
                        .HasForeignKey("IdTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.ProductoStock", null)
                        .WithMany("Reparaciones")
                        .HasForeignKey("ProductoStockId");

                    b.Navigation("Estado");

                    b.Navigation("MomentoReparacion");

                    b.Navigation("Orden");

                    b.Navigation("TipoReparacion");
                });

            modelBuilder.Entity("Dominio.ReparacionEmpleado", b =>
                {
                    b.HasOne("Dominio.Empleado", "Empleado")
                        .WithMany("ReparacionesEmpleados")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Reparacion", "Reparacion")
                        .WithMany("ReparacionesEmpleados")
                        .HasForeignKey("IdReparacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Reparacion");
                });

            modelBuilder.Entity("Dominio.RolPersona", b =>
                {
                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("RolesPersonas")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Rol", "Rol")
                        .WithMany("RolesPersonas")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.HasOne("Dominio.Ciudad", "Ciudad")
                        .WithMany("Sucursales")
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdPersona");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.HasOne("Dominio.MarcaVehiculo", "MarcaVehiculo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdMarcaVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdPersona");

                    b.Navigation("MarcaVehiculo");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Visita", b =>
                {
                    b.HasOne("Dominio.Empleado", "Empleado")
                        .WithMany("Visitas")
                        .HasForeignKey("IdEmpleadoResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Estado", "Estado")
                        .WithMany("Visitas")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Sucursal", "Sucursal")
                        .WithMany("Visitas")
                        .HasForeignKey("IdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Vehiculo", "Vehiculo")
                        .WithMany("Visitas")
                        .HasForeignKey("IdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Estado");

                    b.Navigation("Sucursal");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Dominio.ARL", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.AreaContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.CalidadProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Cargo", b =>
                {
                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Navigation("Sucursales");
                });

            modelBuilder.Entity("Dominio.CompraProveedor", b =>
                {
                    b.Navigation("ProductosCompras");
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.Navigation("PersonasContactos");
                });

            modelBuilder.Entity("Dominio.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.EPS", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Empleado", b =>
                {
                    b.Navigation("ReparacionesEmpleados");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("Dominio.Especialidad", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Estado", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Ordenes");

                    b.Navigation("Reparaciones");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("Dominio.MarcaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.MarcaVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.MetodoDePago", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Dominio.MomentoReparacion", b =>
                {
                    b.Navigation("Reparaciones");
                });

            modelBuilder.Entity("Dominio.Orden", b =>
                {
                    b.Navigation("Reparaciones");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Navigation("ComprasProveedores");

                    b.Navigation("PersonasContactos");

                    b.Navigation("RolesPersonas");

                    b.Navigation("Usuarios");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Navigation("ProductosCompras");

                    b.Navigation("ProductosStocks");
                });

            modelBuilder.Entity("Dominio.ProductoStock", b =>
                {
                    b.Navigation("ProductosStockReparaciones");

                    b.Navigation("Reparaciones");
                });

            modelBuilder.Entity("Dominio.Reparacion", b =>
                {
                    b.Navigation("ProductosStockReparaciones");

                    b.Navigation("ReparacionesEmpleados");
                });

            modelBuilder.Entity("Dominio.Rol", b =>
                {
                    b.Navigation("RolesPersonas");
                });

            modelBuilder.Entity("Dominio.Sucursal", b =>
                {
                    b.Navigation("Empleados");

                    b.Navigation("ProductosStocks");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.TipoEstado", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Dominio.TipoProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.TipoReparacion", b =>
                {
                    b.Navigation("Reparaciones");
                });

            modelBuilder.Entity("Dominio.Vehiculo", b =>
                {
                    b.Navigation("Visitas");
                });
#pragma warning restore 612, 618
        }
    }
}
